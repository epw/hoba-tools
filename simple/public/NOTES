For this one, I'm trying not to do as much that's fancy.

Only one page can deal with logging in: index.html (probably)

There's no Apache-level configuration, just a Python function that can check a cookie with a user ID and a token. The function either returns the user data, or redirects to the login page.

This means that being logged in actually means having an up-to-date token cookie, and only CGI-enabled pages can be gated behind a login.

The login page itself handles creating keypairs, requesting a new user from the server, and negotiates a token cookie with the server.



The client doesn't know how to re-authenticate a token, all it can do is present a token, or ask the server to generate a new one and send it along. This does mean a bad guy could interrupt a user by sending a "new token" request with their user ID, which could allow a DoS, so at some point this will have to require some kind of proof, itself.

It would be nice if the HOBA object used events so it was easy to say "when the user first logs in" from other scripts.

---

Trying to use for other projects. Starting with video-lists because it's fairly simple.

Right now, it does no authentication at all, trusting in client certs instead.

We want this to be quite simple.

We need to protect all API calls (everything at api.cgi), but thankfully nothing else.

So in theory, this could just be "check that token in cookie matches the database. If not, make a popup offering to send the user to the login page."

How easy can we make it to check the database?

---

Later nice-to-haves:
- Good user-data system, easy to use in Python and in JavaScript, with reasonable two-way updating
- Install hoba.py to system with real setup.py file, not the current install.sh mess (but call setup.py from install.sh, probably)
- By-browser data, or at least detection (so you can have different darkness settings for the same account on different devices, and so on)
- Offer login link as:
  - blank for email to send to (also save email with account)
    - Warn you need to get the email right, whoever gets this will be able to log in as you forever!
- When share-generation button is clicked, produce a new, short URL that could be hand-typed
  - As long as the dialog is open, short URL works. Delete when it's closed
  - Visiting the URL gives a button to ask to bind accounts, like normal
  - But instead of working right away, it makes a pop-up in the first browser asking if they want to allow the new one to bind
  - Identify with short PINs again
  - If agreed on the old browser, then the new one is given a secret and binds as usual
  - Don't give the secret until approved, otherwise JavaScript vulnerability
  - I guess this means you need some websockets? Or you could poll once every few seconds, since it's only needed while these windows are open
  - Add place to do this in "hoba-nothing" row, which is visible from the zero-state.
- Support multiple accounts
- Support passwords that generate private keys, for portable logins
- "Advanced menu" for when you know what you're doing and something under the hood is wrong
  - Import keypair directly from .pem files
- Ensure private key has minimum possible permissions (non-exportable, for example)

System slowly taking shape:

There will be a small directory of files a web developer can copy into a user-visible, CGI-enabled directory on their Web server.

hoba.py: Logic to connect to the database, and retrieve a logged-in user with a valid token. Can be imported into any CGI script that needs to authenticate the user.
hoba.js: Library to include on any page that needs to do AJAX calls for the authenticated user. Ideally, would also handle logging in, attaching to known page elements for UI.
hoba.cgi: Server side of account management and authentication. Calls out to hoba.py for lowest level, but implements key logic, challenges, and establishing tokens.

User interface, will need to be modified per site
login.html: Login page with basic controls. Biggest likely modifications
login.css: Login page styling
login.js: Login page logic

In addition, copy hoba_config.py and edit as appropriate. It will be read by hoba.cgi

MVP TODO
- Test by copying essential files to a new project directory, maybe on a new computer
- Write documentation explaining hoba.cgi state machine

MVP done
- Update schema so users have multiple public keys
  - Separate pubkey table, has pubkey, challenge, and token
  - Loop through them all when checking challenge or token
- Make "bind account":
  - Special URL, preferably a hoba.cgi action, that has as a URL param the user and secret. Makes a popup offering to bind this computer to the account specified
  - Probably interface is in hoba.cgi itself, though needs to include hoba.js in order to use standard account creation logic
  - Just like creating account, but verifies secret matches for user row, then creates new pubkey for user and returns original user
- Make "link account":
  - A second <dialog> in hoba.js, this one offers logout and "make a link to login elsewhere"
  - Offers login link as:
    - link
    - QR code
    - share API (like Wordle)
- also offer "destroy credentials"
- Binding: URL params also need to describe user in human-readable way so you know you're logging yourself in
- Easy interface to attach "login management" button to any page
- Randomize user ID
- Fix behavior when account-binding link is opened in browser with existing account
  - It's weird, you can either log in and ignore the link, or overwrite your account, but this isn't actually broken
  - Just needs better documentation
- Combine <dialog>s into one, so it's easier to style and have a place for error messages.
- Good user feedback when things go wrong
- Support non-public account creation
  - No "Create Account" button in UI
  - Button like the standard one to login a new brwoser, but is for account generation instead
  - Probably looks like a new user row with a secret but no associated public keys
  - So it's possible to present the secret and a new public key, and that fills in the account
  - Need to figure out ACLs (can I make it so only I can give out accounts on my server, but for another server, anyone with an account could invite someone?)
- Switch from localStorage to indexeddb for (at least) private key
