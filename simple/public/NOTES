For this one, I'm trying not to do as much that's fancy.

Only one page can deal with logging in: index.html (probably)

There's no Apache-level configuration, just a Python function that can check a cookie with a user ID and a token. The function either returns the user data, or redirects to the login page.

This means that being logged in actually means having an up-to-date token cookie, and only CGI-enabled pages can be gated behind a login.

The login page itself handles creating keypairs, requesting a new user from the server, and negotiates a token cookie with the server.



The client doesn't know how to re-authenticate a token, all it can do is present a token, or ask the server to generate a new one and send it along. This does mean a bad guy could interrupt a user by sending a "new token" request with their user ID, which could allow a DoS, so at some point this will have to require some kind of proof, itself.

It would be nice if the HOBA object used events so it was easy to say "when the user first logs in" from other scripts.


System slowly taking shape:

There will be a small directory of files a user can copy into a user-visible, CGI-enabled directory on their Web server.

hoba.py: Logic to connect to the database, and retrieve a logged-in user with a valid token. Can be imported into any CGI script that needs to authenticate the user.
hoba.js: Library to include on any page that needs to do AJAX calls for the authenticated user. Ideally, would also handle logging in, attaching to known page elements for UI.
hoba.cgi: Server side of account management and authentication. Calls out to hoba.py for lowest level, but implements key logic, challenges, and establishing tokens.

MVP TODO
- Binding: URL params also need to describe user in human-readable way so you know you're logging yourself in
- "Manage account" dialog
  - should also offer "destroy credentials"
  - Offer login link as:
    - blank for email to send to (also save email with account)
      - Warn you need to get the email right, whoever gets this will be able to log in as you forever!
- Switch from localStorage to indexeddb for (at least) private key
- Easy interface to attach "login management" button to any page
- Test by copying essential files (should just be three) to a new project directory, maybe on a new computer

MVP done
- Update schema so users have multiple public keys
  - Separate pubkey table, has pubkey, challenge, and token
  - Loop through them all when checking challenge or token
- Make "bind account":
  - Special URL, preferably a hoba.cgi action, that has as a URL param the user and secret. Makes a popup offering to bind this computer to the account specified
  - Probably interface is in hoba.cgi itself, though needs to include hoba.js in order to use standard account creation logic
  - Just like creating account, but verifies secret matches for user row, then creates new pubkey for user and returns original user
- Make "link account":
  - A second <dialog> in hoba.js, this one offers logout and "make a link to login elsewhere"
  - Offers login link as:
    - link
    - QR code
    - share API (like Wordle)
